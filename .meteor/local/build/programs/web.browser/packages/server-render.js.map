{"version":3,"sources":["meteor://ðŸ’»app/packages/server-render/client.js","meteor://ðŸ’»app/packages/server-render/client-sink.js"],"names":["module","export","onPageLoad","Meteor","watch","require","v","ClientSink","promise","Promise","startup","sink","callback","then","doc","document","head","getElementsByTagName","body","isoError","method","console","error","appendToHead","nodeOrHtml","appendContent","appendToBody","appendToElementById","id","getElementById","renderIntoElementById","element","lastChild","removeChild","redirect","location","window","setStatusCode","setHeader","getHeaders","getCookies","destination","container","cloneNode","innerHTML","firstChild","appendChild","Array","isArray","forEach","elem"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,OAAOC,MAAP,CAAc;AAACC,cAAW;AAAA,WAAIA,UAAJ;AAAA;AAAZ,CAAd;AAA2C,IAAIC,MAAJ;AAAWH,OAAOI,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACF,QAAD,YAAQG,CAAR,EAAU;AAACH,aAAOG,CAAP;AAAS;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIC,UAAJ;AAAeP,OAAOI,KAAP,CAAaC,QAAQ,kBAAR,CAAb,EAAyC;AAACE,YAAD,YAAYD,CAAZ,EAAc;AAACC,iBAAWD,CAAX;AAAa;AAA5B,CAAzC,EAAuE,CAAvE;AAGpI,IAAIE,UAAU,IAAIC,OAAJ,CAAYN,OAAOO,OAAnB,CAAd;AACA,IAAIC,OAAO,IAAIJ,UAAJ,EAAX;;AAEO,SAASL,UAAT,CAAoBU,QAApB,EAA8B;AACnCJ,YAAUA,QAAQK,IAAR,CAAa;AAAA,WAAMD,SAASD,IAAT,CAAN;AAAA,GAAb,CAAV;AACD,C;;;;;;;;;;;ACRDX,OAAOC,MAAP,CAAc;AAACM,cAAW;AAAA,WAAIA,UAAJ;AAAA;AAAZ,CAAd;AAAA,IAAMO,MAAMC,QAAZ;AACA,IAAMC,OAAOF,IAAIG,oBAAJ,CAAyB,MAAzB,EAAiC,CAAjC,CAAb;AACA,IAAMC,OAAOJ,IAAII,IAAjB;;AAEA,IAAMC,WAAW,UAACC,MAAD,EAAY;AAC3BC,UAAQC,KAAR,WAAsBF,MAAtB;AAED,CAHD;;IAIab,U;;;;;;;SACXgB,Y;0BAAaC,U,EAAY;AACvBC,oBAAcT,IAAd,EAAoBQ,UAApB;AACD;;;;;SAEDE,Y;0BAAaF,U,EAAY;AACvBC,oBAAcP,IAAd,EAAoBM,UAApB;AACD;;;;;SAEDG,mB;iCAAoBC,E,EAAIJ,U,EAAY;AAClCC,oBAAcX,IAAIe,cAAJ,CAAmBD,EAAnB,CAAd,EAAsCJ,UAAtC;AACD;;;;;SAEDM,qB;mCAAsBF,E,EAAIJ,U,EAAY;AACpC,UAAMO,UAAUjB,IAAIe,cAAJ,CAAmBD,EAAnB,CAAhB;;AACA,aAAOG,QAAQC,SAAf,EAA0B;AACxBD,gBAAQE,WAAR,CAAoBF,QAAQC,SAA5B;AACD;;AACDP,oBAAcM,OAAd,EAAuBP,UAAvB;AACD;;;;;SAEDU,Q;sBAASC,Q,EAAU;AACjB;AACAC,aAAOD,QAAP,GAAkBA,QAAlB;AACD;;;OAED;;;SACAE,a;6BAAgB;AACdlB,eAAS,eAAT;AACD;;;;;SAEDmB,S;yBAAY;AACVnB,eAAS,WAAT;AACD;;;;;SAEDoB,U;0BAAa;AACXpB,eAAS,YAAT;AACD;;;;;SAEDqB,U;0BAAa;AACXrB,eAAS,YAAT;AACD;;;;;;;;AAIH,SAASM,aAAT,CAAuBgB,WAAvB,EAAoCjB,UAApC,EAAgD;AAC9C,MAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClC;AACA;AACA,QAAMkB,YAAYD,YAAYE,SAAZ,CAAsB,KAAtB,CAAlB,CAHkC,CAIlC;;AACAD,cAAUE,SAAV,GAAsBpB,UAAtB,CALkC,CAMlC;;AACA,WAAOkB,UAAUG,UAAjB,EAA6B;AAC3BJ,kBAAYK,WAAZ,CAAwBJ,UAAUG,UAAlC;AACD;AACF,GAVD,MAUO,IAAIE,MAAMC,OAAN,CAAcxB,UAAd,CAAJ,EAA+B;AACpCA,eAAWyB,OAAX,CAAmB;AAAA,aAAQxB,cAAcgB,WAAd,EAA2BS,IAA3B,CAAR;AAAA,KAAnB;AACD,GAFM,MAEA;AACLT,gBAAYK,WAAZ,CAAwBtB,UAAxB;AACD;AACF,C","file":"/packages/server-render.js","sourcesContent":["import { Meteor } from \"meteor/meteor\";\nimport { ClientSink } from \"./client-sink.js\";\n\nlet promise = new Promise(Meteor.startup);\nlet sink = new ClientSink();\n\nexport function onPageLoad(callback) {\n  promise = promise.then(() => callback(sink));\n}\n","const doc = document;\nconst head = doc.getElementsByTagName(\"head\")[0];\nconst body = doc.body;\n\nconst isoError = (method) => {\n  console.error(`sink.${method} was called on the client when\n    it should only be called on the server.`);\n}\nexport class ClientSink {\n  appendToHead(nodeOrHtml) {\n    appendContent(head, nodeOrHtml);\n  }\n\n  appendToBody(nodeOrHtml) {\n    appendContent(body, nodeOrHtml);\n  }\n\n  appendToElementById(id, nodeOrHtml) {\n    appendContent(doc.getElementById(id), nodeOrHtml);\n  }\n\n  renderIntoElementById(id, nodeOrHtml) {\n    const element = doc.getElementById(id);\n    while (element.lastChild) {\n      element.removeChild(element.lastChild);\n    }\n    appendContent(element, nodeOrHtml);\n  }\n\n  redirect(location) {\n    // code can't be set on the client\n    window.location = location;\n  }\n\n  // server only methods\n  setStatusCode() {\n    isoError(\"setStatusCode\");\n  }\n\n  setHeader() {\n    isoError(\"setHeader\");\n  }\n\n  getHeaders() {\n    isoError(\"getHeaders\");\n  }\n\n  getCookies() {\n    isoError(\"getCookies\");\n  }\n}\n\n\nfunction appendContent(destination, nodeOrHtml) {\n  if (typeof nodeOrHtml === \"string\") {\n    // Make a shallow clone of the destination node to ensure the new\n    // children can legally be appended to it.\n    const container = destination.cloneNode(false);\n    // Parse the HTML into the container, allowing for multiple children.\n    container.innerHTML = nodeOrHtml;\n    // Transplant the children to the destination.\n    while (container.firstChild) {\n      destination.appendChild(container.firstChild);\n    }\n  } else if (Array.isArray(nodeOrHtml)) {\n    nodeOrHtml.forEach(elem => appendContent(destination, elem));\n  } else {\n    destination.appendChild(nodeOrHtml);\n  }\n}\n"]}